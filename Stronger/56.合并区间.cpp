/*
 * @lc app=leetcode.cn id=56 lang=cpp
 *
 * [56] 合并区间
 *
 * https://leetcode-cn.com/problems/merge-intervals/description/
 *
 * algorithms
 * Medium (47.88%)
 * Likes:    1318
 * Dislikes: 0
 * Total Accepted:    368.3K
 * Total Submissions: 768.9K
 * Testcase Example:  '[[1,3],[2,6],[8,10],[15,18]]'
 *
 * 以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi]
 * 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。
 * 
 * 
 * 
 * 示例 1：
 * 
 * 
 * 输入：intervals = [[1,3],[2,6],[8,10],[15,18]]
 * 输出：[[1,6],[8,10],[15,18]]
 * 解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].
 * 
 * 
 * 示例 2：
 * 
 * 
 * 输入：intervals = [[1,4],[4,5]]
 * 输出：[[1,5]]
 * 解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * 1 <= intervals.length <= 10^4
 * intervals[i].length == 2
 * 0 <= starti <= endi <= 10^4
 * 
 * 我们用数组 merged 存储最终的答案。

首先，我们将列表中的区间按照左端点升序排序。然后我们将第一个区间加入 merged 数组中，并按顺序依次考虑之后的每个区间：

如果当前区间的左端点在数组 merged 中最后一个区间的右端点之后，那么它们不会重合，我们可以直接将这个区间加入数组 merged 的末尾；

否则，它们重合，我们需要用当前区间的右端点更新数组 merged 中最后一个区间的右端点，将其置为二者的较大值。



作者：LeetCode-Solution
链接：https://leetcode.cn/problems/merge-intervals/solution/he-bing-qu-jian-by-leetcode-solution/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
 */

// @lc code=start
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        std::vector<std::vector<int>> merged;
        if (intervals.empty()) {
            return merged;
        }
        sort(intervals.begin(), intervals.end());
        std::sort(intervals.begin(), intervals.end(), [](const std::vector<int> &a, const std::vector<int> &b) -> bool {
            // 深坑https://www.jianshu.com/p/c5c9e32618db
            // https://zhuanlan.zhihu.com/p/364361964
            // return a[0] <= b[0];
            return a[0] < b[0];
        });
        for (std::vector<int> &item : intervals) {
            if (merged.empty()) {
                merged.push_back({item[0], item[1]});
                // merged.emplace_back(item);
            } else {
                if (merged.back()[1] < item[0]) {
                    merged.push_back({item[0], item[1]});
                    // merged.emplace_back(item);
                } else {
                    merged.back()[1] = std::max(merged.back()[1], item[1]);
                }
            }
        }
        return merged;
    }
};

// class Solution {
// public:
//     vector<vector<int>> merge(vector<vector<int>>& intervals) {
//         if (intervals.size() == 0) {
//             return {};
//         }
//         sort(intervals.begin(), intervals.end());
//         vector<vector<int>> merged;
//         for (int i = 0; i < intervals.size(); ++i) {
//             int L = intervals[i][0], R = intervals[i][1];
//             if (!merged.size() || merged.back()[1] < L) {
//                 merged.push_back({L, R});
//             }
//             else {
//                 merged.back()[1] = max(merged.back()[1], R);
//             }
//         }
//         return merged;
//     }
// };

// ERROR
// [[115,121],[319,325],[30,37],[95,101],[445,452],[125,126],[172,172],[29,32],[443,452],[465,466],[420,424],[79,84],[203,206],[352,352],[472,479],[214,221],[124,127],[326,330],[253,254],[351,359],[359,367],[281,284],[188,190],[86,89],[321,322],[106,110],[237,243],[359,359],[431,432],[353,357],[99,106],[343,348],[452,461],[229,234],[91,93],[255,257],[112,120],[185,188],[51,55],[136,140],[27,30],[318,323],[281,281],[57,59],[241,243],[116,118],[181,183],[119,123],[481,482],[191,195],[485,494],[78,86],[39,45],[103,103],[240,249],[167,174],[334,341],[384,389],[367,371],[328,329],[56,62],[5,13],[460,465],[224,228],[178,185],[70,73],[418,427],[113,121],[117,123],[400,407],[308,317],[476,478],[257,260],[110,116],[7,7],[437,442],[438,443],[5,14],[420,421],[193,201],[201,204],[113,122],[412,419],[429,438],[443,443],[238,239],[249,256],[246,254],[280,288],[335,344],[498,502],[54,60],[419,421],[335,344],[493,501],[289,293],[292,295],[166,172],[482,487],[438,443],[277,285]]

// OK
// [[115,121],[319,325],[30,37],[95,101],[445,452],[125,126],[172,172],[29,32],[443,452],[465,466],[420,424],[79,84],[203,206],[352,352],[472,479],[214,221],[124,127],[326,330],[253,254],[351,359],[359,367],[281,284],[188,190],[86,89],[321,322],[106,110],[237,243],[359,359],[431,432],[353,357],[99,106],[343,348],[452,461],[229,234],[91,93],[255,257],[112,120],[185,188],[51,55],[136,140],[27,30],[318,323],[281,281],[57,59],[241,243],[116,118],[181,183],[119,123],[481,482],[191,195]]

// ERROR
// [[485,494],[78,86],[39,45],[103,103],[240,249],[167,174],[334,341],[384,389],[367,371],[328,329],[56,62],[5,13],[460,465],[224,228],[178,185],[70,73],[418,427],[113,121],[117,123],[400,407],[308,317],[476,478],[257,260],[110,116],[7,7],[437,442],[438,443],[5,14],[420,421],[193,201],[201,204],[113,122],[412,419],[429,438],[443,443],[238,239],[249,256],[246,254],[280,288],[335,344],[498,502],[54,60],[419,421],[335,344],[493,501],[289,293],[292,295],[166,172],[482,487],[438,443],[277,285]]


// [[485,494],[78,86],[39,45],[103,103],[240,249],[167,174],[334,341],[384,389],[367,371],[328,329],[56,62],[5,13],[460,465],[224,228],[178,185],[70,73],[418,427],[113,121],[117,123],[400,407],[308,317],[476,478],[257,260],[110,116],[7,7],[437,442],[438,443],[5,14],[420,421],[193,201]]

// [[201,204],[113,122],[412,419],[429,438],[443,443],[238,239],[249,256],[246,254],[280,288],[335,344],[498,502],[54,60],[419,421],[335,344],[493,501],[289,293],[292,295],[166,172],[482,487],[438,443],[277,285]]

// ERROR
// [[485,494],[78,86],[39,45],[103,103],[240,249],[167,174],[334,341],[384,389],[367,371],[328,329],[56,62],[5,13],[460,465],[224,228],[178,185],[70,73],[418,427],[113,121],[117,123],[400,407],[308,317],[476,478],[257,260],[110,116],[7,7],[437,442],[438,443],[5,14],[420,421],[193,201],[201,204],[113,122],[412,419],[429,438],[443,443],[238,239],[249,256],[246,254],[280,288],[335,344],[498,502],[54,60]]

// ERROR
// [[485,494],[78,86],[39,45],[103,103],[240,249],[167,174],[334,341],[384,389],[367,371],[328,329],[56,62],[5,13],[460,465],[224,228],[178,185],[70,73],[418,427],[113,121],[117,123],[400,407],[308,317],[476,478],[257,260],[110,116],[7,7],[437,442],[438,443],[5,14],[420,421],[193,201],[201,204],[113,122],[412,419]]

// ERROR
// [[485,494],[78,86],[39,45],[103,103],[240,249],[167,174],[334,341],[384,389],[367,371],[328,329],[56,62],[5,13],[460,465],[224,228],[178,185],[70,73],[418,427],[113,121],[117,123],[400,407],[308,317],[476,478],[257,260],[110,116],[7,7],[437,442],[438,443],[5,14],[420,421],[193,201],[201,204],[113,122]]

// OK
// [[485,494],[78,86],[39,45],[103,103],[240,249],[167,174],[334,341],[384,389],[367,371],[328,329],[56,62],[5,13],[460,465],[224,228],[178,185],[70,73],[418,427],[113,121],[117,123],[400,407],[308,317],[476,478],[257,260],[110,116],[7,7],[437,442],[438,443],[5,14],[420,421],[193,201],[201,204]]

// OK
// [[78,86],[39,45],[103,103],[240,249],[167,174],[334,341],[384,389],[367,371],[328,329],[56,62],[5,13],[460,465],[224,228],[178,185],[70,73],[418,427],[113,121],[117,123],[400,407],[308,317],[476,478],[257,260],[110,116],[7,7],[437,442],[438,443],[5,14],[420,421],[193,201],[201,204],[113,122]]

// OK
// [[485,494],[78,86],[39,45],[103,103],[240,249],[167,174],[334,341],[384,389],[367,371],[328,329],[56,62],[5,13],[460,465],[224,228],[178,185],[70,73],[418,427],[113,121],[117,123],[400,407],[308,317],[476,478],[257,260],[110,116],[437,442],[438,443],[5,14],[420,421],[193,201],[201,204],[113,122]]

// ERROR
// [[78,86],[39,45],[103,103],[240,249],[167,174],[334,341],[384,389],[367,371],[328,329],[56,62],[5,13],[460,465],[224,228],[178,185],[70,73],[418,427],[113,121],[117,123],[400,407],[308,317],[476,478],[257,260],[110,116],[7,7],[437,442],[438,443],[5,14],[420,421],[193,201],[201,204],[113,122],[412,419]]


// @lc code=end

